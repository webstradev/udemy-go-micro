version: '3'

services:

  postgres:
    image: 'postgres:14.2'
    ports:
      - "5432:5432"
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: users
    volumes:
      - /db-data/postgres/:/var/lib/postgresql/data/
    healthcheck:
      test: pg_isready -U "$$POSTGRES_USER" -d "$$POSTGRES_DB"
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s

  authentication-service:
    depends_on:
        postgres:
          condition: service_healthy
    build:
      context: ./../authentication-service
      dockerfile: ./../authentication-service/authentication-service.dockerfile
    restart: always
    ports:
      - "8081:80"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      DSN: "host=postgres port=5432 user=postgres password=password dbname=users sslmode=disable timezone=UTC connect_timeout=5"  
  
  mongo:
    image: 'mongo:4.2.16-bionic'
    ports:
      - "27019:27017"
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      MONGO_INITDB_DATABASE: logs
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - /db-data/mongo/:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo mongo:27017/logs --quiet
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s

  logger-service:
    depends_on:
      mongo:
        condition: service_healthy
    build:
      context: ./../logger-service
      dockerfile: ./../logger-service/logger-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1 
    
  broker-service:
    depends_on:
      rabbitmq:
        condition: service_healthy
    build:
      context: ./../broker-service
      dockerfile: ./../broker-service/broker-service.dockerfile
    restart: always
    ports:
      - "8080:80"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: guest
      RABBITMQ_PASSWORD: guest
  
  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "8025:8025"
      - "1025:1025"
    restart: always
    deploy:
      mode: replicated
      replicas: 1
  
  mail-service:
    build:
      context: ./../mail-service
      dockerfile: ./../mail-service/mail-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      MAIL_DOMAIN: localhost
      MAIL_HOST: mailhog
      MAIL_PORT: 1025
      MAIL_USERNAME: ""
      MAIL_PASSWORD: ""
      MAIL_ENCRYPTION: none
      MAIL_FROM_NAME: "Mailer Service"
      MAIL_FROM_ADDRESS: "mailer@localhost"
    
  rabbitmq:
    image: 'rabbitmq:3.9-alpine'
    ports:
      - "5672:5672"
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - /db-data/rabbitmq/:/var/lib/rabbitmq/
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 10s
      retries: 5
  
  listener-service:
    depends_on:
      rabbitmq:
        condition: service_healthy
    build:
      context: ./../listener-service
      dockerfile: ./../listener-service/listener-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: guest
      RABBITMQ_PASSWORD: guest

